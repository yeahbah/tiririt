// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Tiririt.Data.Internal;

namespace Tiririt.Data.Migrations
{
    [DbContext(typeof(TiriritDbContext))]
    [Migration("20200616143155_Initial-create")]
    partial class Initialcreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasColumnName("user_code")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnName("client_id")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("creation_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnName("data")
                        .HasColumnType("character varying(50000)")
                        .HasMaxLength(50000);

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasColumnName("device_code")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnName("expiration")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SubjectId")
                        .HasColumnName("subject_id")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("UserCode")
                        .HasName("pk_device_codes");

                    b.HasIndex("DeviceCode")
                        .IsUnique()
                        .HasName("ix_device_codes_device_code");

                    b.HasIndex("Expiration")
                        .HasName("ix_device_codes_expiration");

                    b.ToTable("device_codes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnName("key")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnName("client_id")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("creation_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnName("data")
                        .HasColumnType("character varying(50000)")
                        .HasMaxLength(50000);

                    b.Property<DateTime?>("Expiration")
                        .HasColumnName("expiration")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SubjectId")
                        .HasColumnName("subject_id")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnName("type")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Key")
                        .HasName("pk_persisted_grants");

                    b.HasIndex("Expiration")
                        .HasName("ix_persisted_grants_expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type")
                        .HasName("ix_persisted_grants_subject_id_client_id_type");

                    b.ToTable("persisted_grants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("concurrency_stamp")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnName("normalized_name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("role_name_index");

                    b.ToTable("asp_net_roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnName("claim_type")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnName("claim_value")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnName("role_id")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasName("ix_asp_net_role_claims_role_id");

                    b.ToTable("asp_net_role_claims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnName("claim_type")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnName("claim_value")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasName("ix_asp_net_user_claims_user_id");

                    b.ToTable("asp_net_user_claims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnName("login_provider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnName("provider_key")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnName("provider_display_name")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasName("ix_asp_net_user_logins_user_id");

                    b.ToTable("asp_net_user_logins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnName("role_id")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasName("ix_asp_net_user_roles_role_id");

                    b.ToTable("asp_net_user_roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnName("login_provider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnName("value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("asp_net_user_tokens");
                });

            modelBuilder.Entity("Tiririt.Data.Entities.BULL_BEAR_LEVEL_CODE", b =>
                {
                    b.Property<int>("BULL_BEAR_LEVEL_CODE_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("bull_bear_level_code_id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BULL_BEAR_LEVEL_CD")
                        .IsRequired()
                        .HasColumnName("bull_bear_level_cd")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.HasKey("BULL_BEAR_LEVEL_CODE_ID")
                        .HasName("pk_bull_bear_level_code");

                    b.HasAlternateKey("BULL_BEAR_LEVEL_CD")
                        .HasName("ak_bull_bear_level_code_bull_bear_level_cd");

                    b.ToTable("bull_bear_level_code");

                    b.HasData(
                        new
                        {
                            BULL_BEAR_LEVEL_CODE_ID = 1,
                            BULL_BEAR_LEVEL_CD = "Neutral"
                        },
                        new
                        {
                            BULL_BEAR_LEVEL_CODE_ID = 2,
                            BULL_BEAR_LEVEL_CD = "SomewhatBullish"
                        },
                        new
                        {
                            BULL_BEAR_LEVEL_CODE_ID = 3,
                            BULL_BEAR_LEVEL_CD = "Bullish"
                        },
                        new
                        {
                            BULL_BEAR_LEVEL_CODE_ID = 4,
                            BULL_BEAR_LEVEL_CD = "VeryBullish"
                        },
                        new
                        {
                            BULL_BEAR_LEVEL_CODE_ID = 5,
                            BULL_BEAR_LEVEL_CD = "SomewhatBearish"
                        },
                        new
                        {
                            BULL_BEAR_LEVEL_CODE_ID = 6,
                            BULL_BEAR_LEVEL_CD = "Bearish"
                        },
                        new
                        {
                            BULL_BEAR_LEVEL_CODE_ID = 7,
                            BULL_BEAR_LEVEL_CD = "VeryBearish"
                        });
                });

            modelBuilder.Entity("Tiririt.Data.Entities.HASH_TAG", b =>
                {
                    b.Property<int>("HASH_TAG_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("hash_tag_id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("HASH_TAG_TEXT")
                        .IsRequired()
                        .HasColumnName("hash_tag_text")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.HasKey("HASH_TAG_ID")
                        .HasName("pk_hash_tag");

                    b.ToTable("hash_tag");
                });

            modelBuilder.Entity("Tiririt.Data.Entities.LIKE_DISLIKE_POST", b =>
                {
                    b.Property<int>("TIRIRIT_USER_ID")
                        .HasColumnName("tiririt_user_id")
                        .HasColumnType("integer");

                    b.Property<int>("TIRIRIT_POST_ID")
                        .HasColumnName("tiririt_post_id")
                        .HasColumnType("integer");

                    b.Property<int>("DELETED_IND")
                        .HasColumnName("deleted_ind")
                        .HasColumnType("integer");

                    b.Property<int>("LIKE_DISLIKE_POST_ID")
                        .HasColumnName("like_dislike_post_id")
                        .HasColumnType("integer");

                    b.Property<int>("USER_LIKE_IND")
                        .HasColumnName("user_like_ind")
                        .HasColumnType("integer");

                    b.HasKey("TIRIRIT_USER_ID", "TIRIRIT_POST_ID")
                        .HasName("pk_like_dislike_post");

                    b.HasIndex("TIRIRIT_POST_ID")
                        .HasName("ix_like_dislike_post_tiririt_post_id");

                    b.ToTable("like_dislike_post");
                });

            modelBuilder.Entity("Tiririt.Data.Entities.POST_HASH_TAG", b =>
                {
                    b.Property<int>("TIRIRIT_POST_ID")
                        .HasColumnName("tiririt_post_id")
                        .HasColumnType("integer");

                    b.Property<int>("HASH_TAG_ID")
                        .HasColumnName("hash_tag_id")
                        .HasColumnType("integer");

                    b.Property<int>("DELETED_IND")
                        .HasColumnName("deleted_ind")
                        .HasColumnType("integer");

                    b.Property<int>("POST_HASH_TAG_ID")
                        .HasColumnName("post_hash_tag_id")
                        .HasColumnType("integer");

                    b.HasKey("TIRIRIT_POST_ID", "HASH_TAG_ID")
                        .HasName("pk_post_hash_tag");

                    b.HasIndex("HASH_TAG_ID")
                        .HasName("ix_post_hash_tag_hash_tag_id");

                    b.ToTable("post_hash_tag");
                });

            modelBuilder.Entity("Tiririt.Data.Entities.POST_STOCK", b =>
                {
                    b.Property<int>("STOCK_ID")
                        .HasColumnName("stock_id")
                        .HasColumnType("integer");

                    b.Property<int>("TIRIRIT_POST_ID")
                        .HasColumnName("tiririt_post_id")
                        .HasColumnType("integer");

                    b.Property<int>("DELETED_IND")
                        .HasColumnName("deleted_ind")
                        .HasColumnType("integer");

                    b.Property<int>("POST_STOCK_ID")
                        .HasColumnName("post_stock_id")
                        .HasColumnType("integer");

                    b.HasKey("STOCK_ID", "TIRIRIT_POST_ID")
                        .HasName("pk_post_stock");

                    b.HasIndex("TIRIRIT_POST_ID")
                        .HasName("ix_post_stock_tiririt_post_id");

                    b.ToTable("post_stock");
                });

            modelBuilder.Entity("Tiririt.Data.Entities.STOCK", b =>
                {
                    b.Property<int>("STOCK_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("stock_id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("NAME")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<int?>("SECTOR_ID")
                        .HasColumnName("sector_id")
                        .HasColumnType("integer");

                    b.Property<string>("SYMBOL")
                        .IsRequired()
                        .HasColumnName("symbol")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.HasKey("STOCK_ID")
                        .HasName("pk_stock");

                    b.HasAlternateKey("SYMBOL")
                        .HasName("ak_stock_symbol");

                    b.HasIndex("SECTOR_ID")
                        .HasName("ix_stock_sector_id");

                    b.ToTable("stock");
                });

            modelBuilder.Entity("Tiririt.Data.Entities.STOCK_QUOTE", b =>
                {
                    b.Property<int>("STOCK_QUOTE_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("stock_quote_id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("CLOSE")
                        .HasColumnName("close")
                        .HasColumnType("numeric");

                    b.Property<decimal>("HIGH")
                        .HasColumnName("high")
                        .HasColumnType("numeric");

                    b.Property<decimal>("LOW")
                        .HasColumnName("low")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("NET_FOREIGN_BUY")
                        .HasColumnName("net_foreign_buy")
                        .HasColumnType("numeric");

                    b.Property<decimal>("OPEN")
                        .HasColumnName("open")
                        .HasColumnType("numeric");

                    b.Property<int>("STOCK_ID")
                        .HasColumnName("stock_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TRADE_DATE")
                        .HasColumnName("trade_date")
                        .HasColumnType("date");

                    b.Property<long>("VOLUMNE")
                        .HasColumnName("volumne")
                        .HasColumnType("bigint");

                    b.HasKey("STOCK_QUOTE_ID")
                        .HasName("pk_stock_quote");

                    b.HasIndex("STOCK_ID")
                        .HasName("ix_stock_quote_stock_id");

                    b.ToTable("stock_quote");
                });

            modelBuilder.Entity("Tiririt.Data.Entities.STOCK_SECTOR", b =>
                {
                    b.Property<int>("STOCK_SECTOR_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("stock_sector_id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("SECTOR_NAME")
                        .IsRequired()
                        .HasColumnName("sector_name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("STOCK_SECTOR_ID")
                        .HasName("pk_stock_sector");

                    b.HasAlternateKey("SECTOR_NAME")
                        .HasName("ak_stock_sector_sector_name");

                    b.ToTable("stock_sector");
                });

            modelBuilder.Entity("Tiririt.Data.Entities.TIRIRIT_POST", b =>
                {
                    b.Property<int>("TIRIRIT_POST_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("tiririt_post_id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BULL_BEAR_LEVEL_CODE_ID")
                        .HasColumnName("bull_bear_level_code_id")
                        .HasColumnType("integer");

                    b.Property<int>("DELETED_IND")
                        .HasColumnName("deleted_ind")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("MODIFIED_DATE")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("POST_DATE")
                        .HasColumnName("post_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("POST_TEXT")
                        .IsRequired()
                        .HasColumnName("post_text")
                        .HasColumnType("text");

                    b.Property<int?>("RESPONSE_TO_POST_ID")
                        .HasColumnName("response_to_post_id")
                        .HasColumnType("integer");

                    b.Property<int>("TIRIRIT_USER_ID")
                        .HasColumnName("tiririt_user_id")
                        .HasColumnType("integer");

                    b.HasKey("TIRIRIT_POST_ID")
                        .HasName("pk_tiririt_post");

                    b.HasIndex("BULL_BEAR_LEVEL_CODE_ID")
                        .HasName("ix_tiririt_post_bull_bear_level_code_id");

                    b.HasIndex("RESPONSE_TO_POST_ID")
                        .HasName("ix_tiririt_post_response_to_post_id");

                    b.HasIndex("TIRIRIT_USER_ID")
                        .HasName("ix_tiririt_post_tiririt_user_id");

                    b.ToTable("tiririt_post");
                });

            modelBuilder.Entity("Tiririt.Data.Entities.TIRIRIT_USER", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnName("access_failed_count")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("BIRTH_DT")
                        .HasColumnName("birth_dt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("concurrency_stamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnName("email_confirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FIRST_NAME")
                        .IsRequired()
                        .HasColumnName("first_name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LAST_NAME")
                        .IsRequired()
                        .HasColumnName("last_name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnName("lockout_enabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnName("lockout_end")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnName("normalized_email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnName("normalized_user_name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnName("password_hash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("phone_number")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnName("phone_number_confirmed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("REGISTER_DT")
                        .HasColumnName("register_dt")
                        .HasColumnType("timestamp");

                    b.Property<string>("SecurityStamp")
                        .HasColumnName("security_stamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnName("two_factor_enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnName("user_name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id")
                        .HasName("pk_tiririt_user");

                    b.HasIndex("NormalizedEmail")
                        .HasName("email_index");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("user_name_index");

                    b.ToTable("tiririt_user");
                });

            modelBuilder.Entity("Tiririt.Data.Entities.WATCH_LIST", b =>
                {
                    b.Property<int>("WATCH_LIST_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("watch_list_id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("DELETED_IND")
                        .HasColumnName("deleted_ind")
                        .HasColumnType("integer");

                    b.Property<int>("TIRIRIT_USER_ID")
                        .HasColumnName("tiririt_user_id")
                        .HasColumnType("integer");

                    b.Property<string>("WATCH_LIST_NAME")
                        .IsRequired()
                        .HasColumnName("watch_list_name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("WATCH_LIST_ID")
                        .HasName("pk_watch_list");

                    b.HasIndex("TIRIRIT_USER_ID")
                        .HasName("ix_watch_list_tiririt_user_id");

                    b.ToTable("watch_list");
                });

            modelBuilder.Entity("Tiririt.Data.Entities.WATCH_LIST_STOCK", b =>
                {
                    b.Property<int>("WATCH_LIST_STOCK_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("watch_list_stock_id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("STOCK_ID")
                        .HasColumnName("stock_id")
                        .HasColumnType("integer");

                    b.Property<int>("WATCH_LIST_ID")
                        .HasColumnName("watch_list_id")
                        .HasColumnType("integer");

                    b.HasKey("WATCH_LIST_STOCK_ID")
                        .HasName("pk_watch_list_stock");

                    b.HasIndex("STOCK_ID")
                        .HasName("ix_watch_list_stock_stock_id");

                    b.HasIndex("WATCH_LIST_ID")
                        .HasName("ix_watch_list_stock_watch_list_id");

                    b.ToTable("watch_list_stock");
                });

            modelBuilder.Entity("Tiririt.Data.Internal.Entities.MENTION", b =>
                {
                    b.Property<int>("TIRIRIT_POST_ID")
                        .HasColumnName("tiririt_post_id")
                        .HasColumnType("integer");

                    b.Property<int>("TIRIRIT_USER_ID")
                        .HasColumnName("tiririt_user_id")
                        .HasColumnType("integer");

                    b.Property<int>("DELETED_IND")
                        .HasColumnName("deleted_ind")
                        .HasColumnType("integer");

                    b.Property<int>("MENTION_ID")
                        .HasColumnName("mention_id")
                        .HasColumnType("integer");

                    b.HasKey("TIRIRIT_POST_ID", "TIRIRIT_USER_ID")
                        .HasName("pk_mention");

                    b.HasIndex("TIRIRIT_USER_ID")
                        .HasName("ix_mention_tiririt_user_id");

                    b.ToTable("mention");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Tiririt.Data.Entities.TIRIRIT_USER", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Tiririt.Data.Entities.TIRIRIT_USER", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tiririt.Data.Entities.TIRIRIT_USER", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Tiririt.Data.Entities.TIRIRIT_USER", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tiririt.Data.Entities.LIKE_DISLIKE_POST", b =>
                {
                    b.HasOne("Tiririt.Data.Entities.TIRIRIT_POST", "Ref_TiriritPost")
                        .WithMany("Ref_LikeDislikeByUsers")
                        .HasForeignKey("TIRIRIT_POST_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tiririt.Data.Entities.TIRIRIT_USER", "Ref_TiriritUser")
                        .WithMany("Ref_LikeDislikePosts")
                        .HasForeignKey("TIRIRIT_USER_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tiririt.Data.Entities.POST_HASH_TAG", b =>
                {
                    b.HasOne("Tiririt.Data.Entities.HASH_TAG", "Ref_HashTag")
                        .WithMany("Ref_TiriritPosts")
                        .HasForeignKey("HASH_TAG_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tiririt.Data.Entities.TIRIRIT_POST", "Ref_TiriritPost")
                        .WithMany("Ref_HashTags")
                        .HasForeignKey("TIRIRIT_POST_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tiririt.Data.Entities.POST_STOCK", b =>
                {
                    b.HasOne("Tiririt.Data.Entities.STOCK", "Ref_Stock")
                        .WithMany("Ref_TiriritPosts")
                        .HasForeignKey("STOCK_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tiririt.Data.Entities.TIRIRIT_POST", "Ref_TiriritPost")
                        .WithMany("Ref_Stocks")
                        .HasForeignKey("TIRIRIT_POST_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tiririt.Data.Entities.STOCK", b =>
                {
                    b.HasOne("Tiririt.Data.Entities.STOCK_SECTOR", "Ref_Sector")
                        .WithMany("Ref_Stocks")
                        .HasForeignKey("SECTOR_ID");
                });

            modelBuilder.Entity("Tiririt.Data.Entities.STOCK_QUOTE", b =>
                {
                    b.HasOne("Tiririt.Data.Entities.STOCK", "Ref_Stock")
                        .WithMany("Ref_StockQuotes")
                        .HasForeignKey("STOCK_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tiririt.Data.Entities.TIRIRIT_POST", b =>
                {
                    b.HasOne("Tiririt.Data.Entities.BULL_BEAR_LEVEL_CODE", "Ref_BullBearLevel")
                        .WithMany("Ref_TiriritPosts")
                        .HasForeignKey("BULL_BEAR_LEVEL_CODE_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tiririt.Data.Entities.TIRIRIT_POST", "Ref_TiriritPost")
                        .WithMany("Ref_Responses")
                        .HasForeignKey("RESPONSE_TO_POST_ID");

                    b.HasOne("Tiririt.Data.Entities.TIRIRIT_USER", "Ref_PostedBy")
                        .WithMany("Ref_TiriritPosts")
                        .HasForeignKey("TIRIRIT_USER_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tiririt.Data.Entities.WATCH_LIST", b =>
                {
                    b.HasOne("Tiririt.Data.Entities.TIRIRIT_USER", "Ref_TiriritUser")
                        .WithMany("Ref_WatchLists")
                        .HasForeignKey("TIRIRIT_USER_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tiririt.Data.Entities.WATCH_LIST_STOCK", b =>
                {
                    b.HasOne("Tiririt.Data.Entities.STOCK", "Ref_Stock")
                        .WithMany("Ref_StocksInWatchLists")
                        .HasForeignKey("STOCK_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tiririt.Data.Entities.WATCH_LIST", "Ref_WatchList")
                        .WithMany("Ref_Stocks")
                        .HasForeignKey("WATCH_LIST_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tiririt.Data.Internal.Entities.MENTION", b =>
                {
                    b.HasOne("Tiririt.Data.Entities.TIRIRIT_POST", "Ref_TiriritPost")
                        .WithMany("Ref_MentionUsers")
                        .HasForeignKey("TIRIRIT_POST_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tiririt.Data.Entities.TIRIRIT_USER", "Ref_TiriritUser")
                        .WithMany("Ref_MentionedInPosts")
                        .HasForeignKey("TIRIRIT_USER_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
